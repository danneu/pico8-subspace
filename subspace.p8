pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
-- subspace
-- by danneu
local dt = 1/60
local p = {
    x=64, y=64,
    dx=0, dy=0,
    r=4, deg=0,
    -- how many degrees can we turn in 1000ms
    turnspeed=360,
    maxspeed=48, --32
    thrusting=false,
    -- more power = easier to overcome inertia
    thrustpower=1.0
}
local MAXNUM=32767.99999

-- map is a square. mapsize is pixel count of a side.
local mapsize=128*2

local bombs = {}
local bomb_idx=#bombs -- so that first usage is idx=1
for i=1,128 do
    bombs[i] = {
        live=false,
        friendly=false,
        x=0,y=0,dx=0,dy=0,
        dmg=0,
        -- splash radius: the number of pixels away from
        -- detonation that bomb can affect.
        splashr=16,
        -- how fast splash dmg decays if it's not a direct hit
        decay=1
    }
end
function get_pooled_bomb()
    bomb_idx = (bomb_idx+#bombs) % #bombs + 1
    local bomb = bombs[bomb_idx]
    bomb.live = false
    return bomb
end

local viewport = {w=128,h=128}

local SOUNDS = {
    wallbump=0,
}

-- TODO: Make enemy pool and actually spawn enemies
local enemies = {}
local enemy_idx=#enemies -- so that first usage is idx=1
for i=1,128 do
    local x=rnd(mapsize)
    local y=rnd(mapsize)
    local acc=rnd(1)+0.5
    -- TODO: random maxspeed or scale speed difficulty progression
    local e = {
        kind="follower",
        hp=100,
        maxhp=100,
        x=x,y=y,
        dx=0,dy=0,
        acc=acc,
        live=false
    }
    add(enemies, e)
end
function get_pooled_enemy()
    enemy_idx = (enemy_idx+#enemies) % #enemies + 1
    local e = enemies[enemy_idx]
    e.live = false
    return e
end
-- spawn a few enemies off the bat just for demo
for i=1,5 do
    enemies[i].live = true
end

function vec_subtract(x2, y2, x1, y1)
    return x2-x1, y2-y1
end

function update_enemies()
    for _,e in pairs(enemies) do
        if e.live then
            if e.kind == 'follower' then
                local maxspeed = 32
                -- local acc =0.75
                local vecx, vecy = vec_normalize(vec_subtract(p.x,p.y,e.x,e.y))
                e.dx += vecx*e.acc
                e.dy += vecy*e.acc
                e.dx, e.dy = vec_limit_magnitude(e.dx, e.dy, maxspeed)
            end
            e.x += dt*e.dx
            e.y += dt*e.dy
        end
    end
end

function draw_enemies()
    for _,e in pairs(enemies) do
        if e.live then
            if e.kind == 'follower' then
                local flipx = e.x<p.x
                spr(1,e.x-4,e.y-4,1,1,flipx)
                -- draw health bar (only when damaged)
                if true or e.hp<e.maxhp then
                    local hppixels = ceil(e.hp*8/e.maxhp)
                    for i=0,hppixels do
                        pset(e.x+i-4,e.y+8,11)
                    end
                end
            end
        end
    end
end

function draw_bombs()
    for _,e in pairs(bombs) do
        if e.live then
            local color = e.friendly and 12 or 8
            circfill(e.x, e.y, 1, color)
        end
    end
end

-- calculates the position of the player ship's nose.
-- i.e. where bombs shoot from.
function calcNose()
    local x2 = p.x + p.r * cos(p.deg/360)
    local y2 = p.y + p.r * sin(p.deg/360)
    return x2, y2
end

function draw_player()
    circ(p.x, p.y, p.r, 5)
    local x2, y2 = calcNose()
    line(p.x, p.y, x2, y2, 7)
end

function _init()
    cls()
end

-- tweaked length calculation to avoid
-- 16.16 fixed pt overflow.
-- works with x,y up to +/-8191
-- and distance up to 11584 by
-- sacrificing some precision
function vec_length(x, y)
    -- scale down by 6 bits
    local x = x/64
    local y = y/64

    local sq = x*x+y*y
    -- handle overflow
    if (sq<0) return MAXNUM

    -- scale back up by 6 bits
    return sqrt(sq)*64
end

function vec_normalize(x, y)
    local len = vec_length(x, y)
    return x/len, y/len
end

function vec_limit_magnitude(dx, dy, maxspeed)
    local len = vec_length(dx, dy)
    if (len > maxspeed) then
        dx *= maxspeed/len
        dy *= maxspeed/len
    end
    return dx, dy
end

function _update60()
    -- handle user input: turn
    if (btn(0)) then
        p.deg += dt*p.turnspeed
    elseif (btn(1)) then
        p.deg -= dt*p.turnspeed
    end

    -- handle user input: thrust
    if (btn(2)) then
        p.thrusting=true
        p.dx += p.thrustpower * cos(p.deg/360)
        p.dy += p.thrustpower * sin(p.deg/360)
    elseif (btn(3)) then
        p.thrusting=true
        p.dx -= p.thrustpower * cos(p.deg/360)
        p.dy -= p.thrustpower * sin(p.deg/360)
    else
        p.thrusting=false
    end

    -- handle user input: shoot bomb
    if btnp(5) then
        local x, y = calcNose()
        speed = 64
        local bomb = get_pooled_bomb()
        bomb.live=true
        bomb.friendly=true
        bomb.x=x
        bomb.y=y
        bomb.dx=speed*cos(p.deg/360) + p.dx
        bomb.dy=speed*sin(p.deg/360) + p.dy
        bomb.dmg=50
    end

    -- enforce player max speed
    local len = vec_length(p.dx, p.dy)
    if (len > p.maxspeed) then
        p.dx *= p.maxspeed/len
        p.dy *= p.maxspeed/len
    end

    -- apply player velocity
    p.x += dt*p.dx
    p.y += dt*p.dy

    -- apply collision which will mutate player pos/vel
    local cinfo = collide_map(p, 0)
    if cinfo.collided and vec_length(p.dx, p.dy) > 3.0 then
        sfx(SOUNDS.wallbump)
    end

    -- update camera
    camera(p.x-viewport.w/2, p.y-viewport.h/2)

    update_enemies()
    update_bombs()
end

function update_bombs()
    local dirs = {
        {x=-1,y=0},
        {x=1,y=0},
        {x=0,y=-1},
        {x=0,y=1}
    }
    -- FIXME: this is pretty silly
    for _,b in pairs(bombs) do
        ::nextbomb::
        if b.live then
            b.x += dt*b.dx
            b.y += dt*b.dy
            for _,dir in pairs(dirs) do
                local x = b.x+dir.x
                local y = b.y+dir.y
                -- test collision: wall
                if fget(mget(flr8(x), flr8(y)), 0) then
                    detonate_bomb(b)
                    goto nextbomb
                else
                    -- test collision: enemy
                    -- TODO: just do pos+radius check per enemy.
                    for _,e in pairs(enemies) do
                        if e.live and b.x>=e.x-4 and b.x<=e.x+4 and b.y>=e.y-4 and b.y<=e.y+4 then
                            detonate_bomb(b)
                            goto nextbomb
                        end
                    end
                end
            end
        end
    end
end

function vec_distance(x1,y1,x2,y2)
    return vec_length(x2-x1, y2-y1)
end

-- bombs explode at a point and do splash damage.
-- this fn applies dmg to nearby enemies and
-- releases bomb back to the pool.
-- this fn also mutates enemies and possibly returns
-- them to enemy pool.
function detonate_bomb(b)
    local E=2.718
    printh("detonated")
    b.live=false
    -- find all enemies within splashr
    for _,e in pairs(enemies) do
        if e.live then
            local dist = vec_distance(e.x,e.y,b.x,b.y)
            printh('dist'..dist)
            if dist<=b.splashr then
                -- calculate dmg based on splash radius and splash decay
                local dmg = b.dmg * (E^(-dist/b.splashr*b.decay))
                printh('dmg:'..dmg)
                e.hp-=dmg
                if e.hp <= 0 then
                    e.live=false
                end
            end
        end
    end
end

function draw_debug()
    local len = vec_length(p.dx, p.dy)
    local offsetx = p.x-viewport.w/2
    local offsety = p.y-viewport.h/2
    print("vel: "..len, 1+offsetx, 1+offsety)
    print("pos: ("..p.x..", "..p.y..")", 1+offsetx, 8+offsety)
end

-- map is 2 screens by 2 screens big, so 256x256
function draw_minimap()
    local minisize=16
    local minix = p.x-viewport.w/2
    local miniy = p.y+viewport.h/2-minisize-1
    rectfill(minix, miniy, minix+minisize-1, miniy+minisize-1,0)
    rect(minix, miniy, minix+minisize-1, miniy+minisize-1,5)
    -- draw enemies
    for _,e in pairs(enemies) do
        if e.live then
            pset(minix+flr(e.x/minisize), miniy+flr(e.y/minisize), 8)
        end
    end
    -- draw player
    pset(minix+flr(p.x/minisize), miniy+flr(p.y/minisize), 7)
end

function _draw()
    cls()
    map(0,0)
    draw_debug()
    draw_player()
    draw_enemies()
    draw_bombs()
    draw_minimap()
end

-- convert a position from game space (pixels)
-- to map space (tiles)
function flr8(v)
    return flr(v/8)
end

-- FIXME: this collision detection is playable but pretty janky.
--
-- e is the player entity for now.
-- returns {collided=bool}
function collide_map(e, flag)
    local collided = false

    -- first, check the north, south, east, west bounding
    -- box of the player's circle to handle simple reflection
    -- off vertical/horiz walls. (tm, ml, mr, bm)
    --
    -- then, later, we will check the diagonals (tl,tr,bl,br)
    -- to see if we're hitting a tile corner. we will
    -- handle the bounce as if we're hitting a circle.
    --
    --      tl  tm  tr
    --       .__+__.
    --      /       \
    --  ml +         + mr
    --      \.__+__./
    --      bl  bm   br

    if e.dx<0 then -- if moving left
        local leftx, lefty = e.x-e.r, e.y
        if fget(mget(flr8(leftx), flr8(lefty)), flag) then
            collided=true
            -- move entity to the right so it's only touching wall
            e.x+=(8-leftx)%8
            e.dx*=-1
        end
    elseif e.dx>0 then -- moving right
        local rightx, righty = e.x+e.r, e.y
        if fget(mget(flr8(rightx), flr8(righty)), flag) then
            collided=true
            e.x-=(rightx-8)%8
            e.dx*=-1
        end
    end

    if e.dy<0 then -- if moving up
        local topx, topy = e.x, e.y-e.r
        if fget(mget(flr8(topx), flr8(topy)), flag) then
            collided=true
            e.y+=(8-topy)%8
            e.dy*=-1
        end
    elseif e.dy>0 then -- if moving down
        local botx, boty = e.x, e.y+e.r
        if fget(mget(flr8(botx), flr8(boty)), flag) then
            collided=true
            e.y-=(boty-8)%8
            e.dy*=-1
        end
    end

    -- now check for corner collisions
    if not collided then
        -- tl---tr
        --  |   |
        -- bl---br

        -- save prev speed so that we can reapply it after new velocity
        local speed = vec_length(e.dx, e.dy)
        -- hypotenuse aka length of inscribed square
        -- lets us check player's "diagonal" coords
        -- local h = sqrt(e.r * e.r + e.r * e.r)
        -- approximate hypotenuse
        local h = e.r*1.4142857

        local tlx, tly = e.x-h/2, e.y-h/2
        local trx, try = e.x+h/2, e.y-h/2
        local blx, bly = e.x-h/2, e.y+h/2
        local brx, bry = e.x+h/2, e.y+h/2
        if fget(mget(tlx/8, tly/8), flag) then
            collided=true
            local tilex, tiley = flr(tlx/8)*8+4, flr(tly/8)*8+4
            local vecx, vecy = vec_normalize(e.x-tilex, e.y-tiley)
            e.dx = vecx*speed
            e.dy = vecy*speed
        elseif fget(mget(trx/8, try/8), flag) then
            collided=true
            local tilex, tiley = flr(trx/8)*8+4, flr(try/8)*8+4
            local vecx, vecy = vec_normalize(e.x-tilex, e.y-tiley)
            e.dx = vecx*speed
            e.dy = vecy*speed
        elseif fget(mget(blx/8, bly/8), flag) then
            collided=true
            local tilex, tiley = flr(blx/8)*8+4, flr(bly/8)*8+4
            local vecx, vecy = vec_normalize(e.x-tilex, e.y-tiley)
            e.dx = vecx*speed
            e.dy = vecy*speed
        elseif fget(mget(brx/8, bry/8), flag) then
            collided=true
            local tilex, tiley = flr(brx/8)*8+4, flr(bry/8)*8+4
            local vecx, vecy = vec_normalize(e.x-tilex, e.y-tiley)
            e.dx = vecx*speed
            e.dy = vecy*speed
        end
    end

    -- finally, any time we have a collision, we lose some speed
    if collided then
        e.dx *= 0.75
        e.dy *= 0.75
    end

    return {collided=collided}
end


__gfx__
00000000000000000550055500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000007777700599959000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000777777709aaaa9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000007575777a55a55a900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000007757777aaa5aaa900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000007777700aaaaa9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000007070000a0a0a9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000a0a0a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
22222222bbb3b3bb00000000111133bb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
21112112b333333b1100000013b1333b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2eee22123331113b1210000013311333000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11222211331221331e2100001111113b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
222e2ee2b31222131ee21000113b1133000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
21222222333111331222e1001111133b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
211e1112b333333b12ee221022113b3b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
22222122bbb3b3bb011111102211333b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00100100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
4040404040404040404040404040404040404040404040404040404040404040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505050505050505050505050505050505050505050505050505050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4350505050505050505050505050505050505050505050505050505050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4350505050504040505050404050505050505050405050505050505050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4350505050404050505050505040405050505050505050505050405050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505041414050505050505050504050505050505050405050505050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505050505050505050505050505050405050505050404050505050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505050505050505050505050505050505050505050504050505050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505050505050505050405050505050505050505050505050505050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505050505050505050405050505050505050505050505050505050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505050505050505050505050505050505050505050505050505050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505050404050505050505050505050505050505050505050505050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505050504040505050505050405050505050505050505050505050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505050505040505050505050405050505050504050505050404050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505050505050405050505050505050505050505050505050404050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505050505050405050505050505050505050505050505050404050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505050505050405050505050505050505050505050405050404050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505050505050505050505050505050505050505050405050504050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505050505050505050505050505050505050505050405050505050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505040505050505050505050505050505050505050505050505050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505050505050505050505050505050505050505050505050505050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505050505050504050505050505050505050505050505050505050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505050505050505050505050505050505050505050505050505050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505050405050505050505050505050405050505050505050505050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505050505050505050504050505050505050505050505050505050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505050505050505050505050505050505050505050505050505050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505050505050505050505050505050505050505050505050504050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505050505040505050505050505050505050505050505050504050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505050505050505050505040505050505050505040505050505050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505050405050505050505050505050505050505050505050505050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4050505050505050505050505050505050505050505050505050505050505040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4040404040404040404040404040404040404040404040404040404040404040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000100000904009040060400504003040010400004001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000010075000700007000010000100011000110001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
